"""
Launcher mejorado para la aplicaci√≥n Esc√°ner OCR
"""

import sys
import os
from pathlib import Path

def check_environment():
    """Verifica el entorno antes de ejecutar"""
    print("üîç Verificando entorno...")
    
    # Verificar dependencias cr√≠ticas
    missing_deps = []
    
    try:
        import PyQt5
        print("‚úÖ PyQt5 disponible")
    except ImportError:
        missing_deps.append("PyQt5")
    
    try:
        import cv2
        print("‚úÖ OpenCV disponible")
    except ImportError:
        missing_deps.append("opencv-python")
    
    try:
        import numpy
        print("‚úÖ NumPy disponible")
    except ImportError:
        missing_deps.append("numpy")
    
    # Verificar motores OCR
    ocr_available = False
    
    try:
        import pytesseract
        print("‚úÖ Tesseract disponible")
        ocr_available = True
    except ImportError:
        print("‚ö†Ô∏è  Tesseract no disponible")
    
    try:
        import easyocr
        print("‚úÖ EasyOCR disponible")
        ocr_available = True
    except ImportError:
        print("‚ö†Ô∏è  EasyOCR no disponible")
    
    # Verificar motor de demostraciones
    try:
        import sympy
        print("‚úÖ SymPy (demostraciones) disponible")
    except ImportError:
        missing_deps.append("sympy")
    
    if missing_deps:
        print(f"\n‚ùå Dependencias faltantes: {', '.join(missing_deps)}")
        print("Ejecuta: pip install -r requirements.txt")
        return False
    
    if not ocr_available:
        print("\n‚ùå No hay motores OCR disponibles")
        print("Instala al menos uno:")
        print("- pip install pytesseract")
        print("- pip install easyocr")
        print("- Para Tesseract: descargar desde tesseract-ocr.github.io")
        return False
    
    print("‚úÖ Entorno verificado correctamente")
    return True

def main():
    """Funci√≥n principal del launcher"""
    print("üöÄ Esc√°ner OCR con Motor de Demostraciones Matem√°ticas")
    print("=" * 60)
    
    # Verificar que estamos en el directorio correcto
    current_dir = Path(__file__).parent
    main_file = current_dir / "main.py"
    
    if not main_file.exists():
        print("‚ùå Error: No se encontr√≥ main.py")
        print(f"   Aseg√∫rate de estar en el directorio correcto: {current_dir}")
        input("Presiona Enter para salir...")
        return
    
    # Verificar entorno
    if not check_environment():
        print("\nüí° SOLUCIONES:")
        print("1. Ejecutar el instalador: install_completo.bat")
        print("2. Instalar manualmente: pip install -r requirements.txt")
        print("3. Para Tesseract: https://github.com/UB-Mannheim/tesseract/wiki")
        input("\nPresiona Enter para salir...")
        return
    
    print("\nüéØ Iniciando aplicaci√≥n principal...")
    
    # Configurar entorno OCR
    try:
        from ocr_config import setup_environment
        setup_environment()
    except ImportError:
        print("‚ö†Ô∏è  M√≥dulo de configuraci√≥n no encontrado")
    
    # Ejecutar aplicaci√≥n principal
    try:
        import main
        main.main()
    except Exception as e:
        print(f"‚ùå Error al ejecutar la aplicaci√≥n: {e}")
        print("\nüí° Posibles soluciones:")
        print("   1. Reinstalar dependencias: pip install -r requirements.txt")
        print("   2. Verificar instalaci√≥n de Tesseract OCR")
        print("   3. Revisar que Python 3.7+ est√© instalado")
        print("   4. Ejecutar como administrador si es necesario")
        input("\nPresiona Enter para salir...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Aplicaci√≥n cerrada por el usuario")
    except Exception as e:
        print(f"\nüí• Error inesperado: {e}")
        input("Presiona Enter para salir...")
